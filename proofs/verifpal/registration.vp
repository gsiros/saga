// SAGA AGENT REGISTRATION
attacker[active]

principal CA[
  generates SK_CA
  PK_CA = G^SK_CA
]

principal Provider[
  generates SK_Prov
  PK_Prov = G^SK_Prov
]

principal User[
    generates SK_A, SAC_A, SOTK1_A, aid_A, uid_A, ED_A
    PK_A = G^SK_A // TLS
    PAC_A = G^SAC_A
    OTK1_A = G^SOTK1_A

    OTK1_A_sig = SIGN(SK_A, OTK1_A)
]

CA -> Provider: [PK_CA]
CA -> User: [PK_CA]
Provider -> User: [PK_Prov]
User -> CA: [aid_A], [PK_A]

principal CA[
  Cert_A = SIGN(SK_CA, CONCAT(aid_A, PK_A))
]

CA -> User: [Cert_A]

principal User[
  generates CP_A
  sigma_A_sig = SIGN(SK_A, CONCAT(aid_A, ED_A, PK_A, PAC_A, PK_Prov))
]

User -> Provider: aid_A, ED_A, CP_A, [PK_A], Cert_A, [PAC_A], OTK1_A, OTK1_A_sig, sigma_A_sig

principal Provider[
  _ = SIGNVERIF(PK_CA, CONCAT(aid_A, PK_A), Cert_A)? // 
  _ = SIGNVERIF(PK_A, OTK1_A, OTK1_A_sig)?
  _ = SIGNVERIF(PK_A, CONCAT(aid_A, ED_A, PK_A, PAC_A, PK_Prov), sigma_A_sig)?
  sigma_Prov_sig = SIGN(SK_Prov, CONCAT(aid_A, Cert_A, ED_A, PAC_A, sigma_A_sig))
]

Provider -> User: sigma_Prov_sig

principal User[
  _ = SIGNVERIF(PK_Prov, CONCAT(aid_A, Cert_A, ED_A, PAC_A, sigma_A_sig), sigma_Prov_sig)?

]

queries[
  authentication? User -> Provider: OTK1_A
  authentication? User -> Provider: ED_A
]
